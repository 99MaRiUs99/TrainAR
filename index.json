{
  "api/Editor.Scripts.ConvertToTrainARObject.html": {
    "href": "api/Editor.Scripts.ConvertToTrainARObject.html",
    "title": "Class ConvertToTrainARObject | TrainAR Documentation",
    "keywords": "Class ConvertToTrainARObject ConvertARInteractable is an Editor script that adds a context menu to GameObjects in the hierarchy named \"Convert to TrainAR Object\" when the object is eligible (therefore has a transform, MeshFilter and MeshRenderer). Inheritance Object ConvertToTrainARObject Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class ConvertToTrainARObject : UnityEditor.Editor Methods | Improve this Doc View Source AddConvertionContextItem() Adds the \"Convert to TrainAR Object\" menu Item to the context menu Declaration public static void AddConvertionContextItem()"
  },
  "api/Editor.Scripts.EditorTrainARObjectToolbar.html": {
    "href": "api/Editor.Scripts.EditorTrainARObjectToolbar.html",
    "title": "Class EditorTrainARObjectToolbar | TrainAR Documentation",
    "keywords": "Class EditorTrainARObjectToolbar The EditorTrainARObjectToolbar is the toolbar in the sceneview that allows setting inspector options like without active/inactive, grabbable, interactable, combinable without opening an inspector. Inheritance Object EditorTrainARObjectToolbar Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class EditorTrainARObjectToolbar : ToolbarOverlay"
  },
  "api/Editor.Scripts.html": {
    "href": "api/Editor.Scripts.html",
    "title": "Namespace Editor.Scripts | TrainAR Documentation",
    "keywords": "Namespace Editor.Scripts Classes ConvertToTrainARObject ConvertARInteractable is an Editor script that adds a context menu to GameObjects in the hierarchy named \"Convert to TrainAR Object\" when the object is eligible (therefore has a transform, MeshFilter and MeshRenderer). EditorTrainARObjectToolbar The EditorTrainARObjectToolbar is the toolbar in the sceneview that allows setting inspector options like without active/inactive, grabbable, interactable, combinable without opening an inspector. MeshCombinerEditor The MeshCombinerEditor script adds an inspector GUI to combine multiple meshes into a single mesh and saves this at a desired location. OpenAuthoringToolOnLoad Every time the editor is started, trigger switching to the TrainAR authoring tool. PlayModeButtonOverride The PlayModeButtonOverride editor script implements utility for the unity editor play buttons that overrides its functionality with TrainAR specific functionality to either switch the build target if there is an unsupported one currently selected or allow building through it. This is done for convenience of building and also to prevent the playmode execution, as this is currently is not supported by the framework anyway. StateRequestSimulatorEditor Add the GUI to the inspector to simulate stateRequests to test the statemachine in the editor. TrainAREditorMenu The TrainAREditorMenu adds a top menu for trainAR specific funtionallity like building, switching plattform or switching the mode (layout) of the editor."
  },
  "api/Editor.Scripts.MeshCombinerEditor.html": {
    "href": "api/Editor.Scripts.MeshCombinerEditor.html",
    "title": "Class MeshCombinerEditor | TrainAR Documentation",
    "keywords": "Class MeshCombinerEditor The MeshCombinerEditor script adds an inspector GUI to combine multiple meshes into a single mesh and saves this at a desired location. Inheritance Object MeshCombinerEditor Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class MeshCombinerEditor : UnityEditor.Editor Methods | Improve this Doc View Source OnInspectorGUI() The inspector of the MeshCombinerEditor adds the option to reference meshes which are skipped in the combine process. The combined mesh is stored in the location which is defined in this inspector. Declaration public override void OnInspectorGUI() | Improve this Doc View Source SaveCombinedMesh(Mesh, String) Saves the given mesh at the given location. Creates the directories if the given path doesn't exits. Declaration public static string SaveCombinedMesh(Mesh mesh, string folderPath) Parameters Type Name Description Mesh mesh Any to store mesh. String folderPath The path where to store the given mesh. Returns Type Description String The path where the mesh is stored"
  },
  "api/Editor.Scripts.OpenAuthoringToolOnLoad.html": {
    "href": "api/Editor.Scripts.OpenAuthoringToolOnLoad.html",
    "title": "Class OpenAuthoringToolOnLoad | TrainAR Documentation",
    "keywords": "Class OpenAuthoringToolOnLoad Every time the editor is started, trigger switching to the TrainAR authoring tool. Inheritance Object OpenAuthoringToolOnLoad Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class OpenAuthoringToolOnLoad"
  },
  "api/Editor.Scripts.PlayModeButtonOverride.html": {
    "href": "api/Editor.Scripts.PlayModeButtonOverride.html",
    "title": "Class PlayModeButtonOverride | TrainAR Documentation",
    "keywords": "Class PlayModeButtonOverride The PlayModeButtonOverride editor script implements utility for the unity editor play buttons that overrides its functionality with TrainAR specific functionality to either switch the build target if there is an unsupported one currently selected or allow building through it. This is done for convenience of building and also to prevent the playmode execution, as this is currently is not supported by the framework anyway. Inheritance Object PlayModeButtonOverride Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public static class PlayModeButtonOverride Methods | Improve this Doc View Source BuildAndDeployProjectToDevice() Build and Runs the project for the current build target Declaration public static bool BuildAndDeployProjectToDevice() Returns Type Description Boolean True, if the build succeeded | Improve this Doc View Source ShowDialogBoxForBuilding() Shows a Unity Editor Dialog box asking the user if he wants to build the Project Declaration public static void ShowDialogBoxForBuilding() | Improve this Doc View Source SwitchBuildTargetToAndroid() Switches Unity Build Target to Android Declaration public static void SwitchBuildTargetToAndroid() | Improve this Doc View Source SwitchBuildTargetToIOS() Switches Unity Build Target to iOS Declaration public static void SwitchBuildTargetToIOS()"
  },
  "api/Editor.Scripts.StateRequestSimulatorEditor.html": {
    "href": "api/Editor.Scripts.StateRequestSimulatorEditor.html",
    "title": "Class StateRequestSimulatorEditor | TrainAR Documentation",
    "keywords": "Class StateRequestSimulatorEditor Add the GUI to the inspector to simulate stateRequests to test the statemachine in the editor. Inheritance Object StateRequestSimulatorEditor Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class StateRequestSimulatorEditor : UnityEditor.Editor Methods | Improve this Doc View Source OnInspectorGUI() Adds the inspector GUI. Declaration public override void OnInspectorGUI()"
  },
  "api/Editor.Scripts.TrainAREditorMenu.html": {
    "href": "api/Editor.Scripts.TrainAREditorMenu.html",
    "title": "Class TrainAREditorMenu | TrainAR Documentation",
    "keywords": "Class TrainAREditorMenu The TrainAREditorMenu adds a top menu for trainAR specific funtionallity like building, switching plattform or switching the mode (layout) of the editor. Inheritance Object TrainAREditorMenu Namespace : Editor.Scripts Assembly : Assembly-CSharp-Editor.dll Syntax public class TrainAREditorMenu : UnityEditor.Editor Methods | Improve this Doc View Source BuildToDevice() Build and Runs the current solution Declaration public static void BuildToDevice() | Improve this Doc View Source HideFrameworkHierarchy() Hides the framework GameObject in the hierarchy Declaration public static void HideFrameworkHierarchy() | Improve this Doc View Source HideTrainARReferenceScene() Hides the TrainAR reference setup in the scene Declaration public static void HideTrainARReferenceScene() | Improve this Doc View Source OpenDocumentation() Opens the Documentation Declaration public static void OpenDocumentation() | Improve this Doc View Source OpenTrainARScene() Opens the default TrainAR scene. Declaration public static void OpenTrainARScene() | Improve this Doc View Source ResetStatemachineToDefault() Opens the default statemachine in the visual scripting window Declaration public static void ResetStatemachineToDefault() | Improve this Doc View Source ResetTrainARSceneToAuthoringToolDefault() Resets the scene camera to a pivot point, rotation and distance that looks good in the Scene. Declaration public static void ResetTrainARSceneToAuthoringToolDefault() | Improve this Doc View Source ShowFrameworkHierarchy() Shows the framework GameObject in the hierarchy Declaration public static void ShowFrameworkHierarchy() | Improve this Doc View Source SwitchToAndroid() Switches the current platform to Android Declaration public static void SwitchToAndroid() | Improve this Doc View Source SwitchToIOS() Switches the current platform to iOS Declaration public static void SwitchToIOS() | Improve this Doc View Source SwitchToTrainARMode() Switches the Editor Layout to TrainAR Authoring mode Declaration public static void SwitchToTrainARMode() | Improve this Doc View Source SwitchToUnityMode() Switches the Editor Layout to the default Unity Layout Declaration public static void SwitchToUnityMode()"
  },
  "api/Interaction.AudioController.html": {
    "href": "api/Interaction.AudioController.html",
    "title": "Class AudioController | TrainAR Documentation",
    "keywords": "Class AudioController Handles the object specific interaction sounds. Inheritance Object AudioController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class AudioController : MonoBehaviour Fields | Improve this Doc View Source CombineSound The audioclip that is played when a TrainAR Object is combined with. Declaration public AudioClip CombineSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source DeselectSound The audioclip that is played when a TrainAR Object is deselected. Declaration public AudioClip DeselectSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source ErrorSound The audioclip that is played when a interaction was false. Declaration public AudioClip ErrorSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source GrabSound The audioclip that is played when a TrainAR Object is grabbed. Declaration public AudioClip GrabSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source InteractSound The audioclip that is played when a TrainAR Object is interacted with. Declaration public AudioClip InteractSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source ReleaseSound The audioclip that is played when a TrainAR Object is released. Declaration public AudioClip ReleaseSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. | Improve this Doc View Source SelectSound The audioclip that is played when a TrainAR Object is selected. Declaration public AudioClip SelectSound Field Value Type Description AudioClip Default clip is referenced. If none is referenced it gets ignored. Methods | Improve this Doc View Source Start() The AudioController of a TrainAR object adds listener to trainar events to play the specific audioclips. Declaration public void Start()"
  },
  "api/Interaction.CollisionController.html": {
    "href": "api/Interaction.CollisionController.html",
    "title": "Class CollisionController | TrainAR Documentation",
    "keywords": "Class CollisionController Detects and handles collisions used for combining GameObjects. Inheritance Object CollisionController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class CollisionController : MonoBehaviour Fields | Improve this Doc View Source boxCollider Holds the Boxcollider of the attached Gameobject. Declaration public BoxCollider boxCollider Field Value Type Description BoxCollider Boundingbox with dimensions of the mesh. | Improve this Doc View Source grabbedObject Holds a reference to the current grabbed TrainAR object. Declaration public GameObject grabbedObject Field Value Type Description GameObject Is changed depending on the grabbed object. Methods | Improve this Doc View Source Awake() Sets script references to GameObjects on Awake Declaration public void Awake()"
  },
  "api/Interaction.CollisionController.Intersection.html": {
    "href": "api/Interaction.CollisionController.Intersection.html",
    "title": "Struct CollisionController.Intersection | TrainAR Documentation",
    "keywords": "Struct CollisionController.Intersection Holds references for intersections. Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public struct Intersection Constructors | Improve this Doc View Source Intersection(GameObject, Boolean) Constructer to create a struct to store references for a detected intersection. Declaration public Intersection(GameObject intersectedObject, bool intersectionDetected) Parameters Type Name Description GameObject intersectedObject The intersected TrainAR object. Boolean intersectionDetected If a intersection is detected Methods | Improve this Doc View Source GetIntersectedObject() Get the intersected TrainAR object reference in the struct. Declaration public GameObject GetIntersectedObject() Returns Type Description GameObject The TrainAR gameobject. | Improve this Doc View Source GetIntersectionDetected() Get if a intersection is detected. Declaration public bool GetIntersectionDetected() Returns Type Description Boolean If a intersection is detected. | Improve this Doc View Source SetIntersectedObject(GameObject) Set the intersected TrainAR object reference in the struct. Declaration public void SetIntersectedObject(GameObject intersectedObject) Parameters Type Name Description GameObject intersectedObject The intersected Object. | Improve this Doc View Source SetIntersectionDetected(Boolean) Set if a intersection is detected. Declaration public void SetIntersectionDetected(bool intersectionDetected) Parameters Type Name Description Boolean intersectionDetected True if intersection is detected."
  },
  "api/Interaction.CrosshairController.html": {
    "href": "api/Interaction.CrosshairController.html",
    "title": "Class CrosshairController | TrainAR Documentation",
    "keywords": "Class CrosshairController The CrosshairController activates/deactivates the crosshair which is positioned in the middle of the screen. Inheritance Object CrosshairController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class CrosshairController : MonoBehaviour Fields | Improve this Doc View Source contextButtonsAreActive Changes depending if the contextButtons are active. Declaration public bool contextButtonsAreActive Field Value Type Description Boolean True if contextButtons are active. Methods | Improve this Doc View Source ActivateContextButtons() Activates the context buttons. Declaration public void ActivateContextButtons() | Improve this Doc View Source ActivateCrosshair() Activate the crosshair. Declaration public void ActivateCrosshair() | Improve this Doc View Source DeactivateContextButtons() Deactivates the context buttons. Declaration public void DeactivateContextButtons() | Improve this Doc View Source DeactivateCrosshair() Deactivates the crosshair. Declaration public void DeactivateCrosshair()"
  },
  "api/Interaction.html": {
    "href": "api/Interaction.html",
    "title": "Namespace Interaction | TrainAR Documentation",
    "keywords": "Namespace Interaction Classes AudioController Handles the object specific interaction sounds. CollisionController Detects and handles collisions used for combining GameObjects. CrosshairController The CrosshairController activates/deactivates the crosshair which is positioned in the middle of the screen. InteractionController Handles the interactions, i.e. grabbing, releasing, interacting and combining of the TrainARObjects. MaterialController Handles material related functionality for one TrainAR object. ObjectLerpingController Handles the lerping towards the camera when an object is grabbed. Outline ResetLostObjectController Component that resets the TrainAR object back to the original spawn point when its to far away. RigidbodyController The RigidbodyController handles the activation and deactivation of physics. TrainARObject The main class for a TrainAR object. After adding this script all following RequiredComponents are added. SelectionBase, MeshCollider, BoxCollider, RigidbodyController, MaterialController, AudioController, Rigidbody, Outline, CollisionController, AudioSource. The TrainAR events are also defined in this script. TrainARObject.CustomUnityEvent Structs CollisionController.Intersection Holds references for intersections. Enums Outline.Mode Different types for the outlines."
  },
  "api/Interaction.InteractionController.html": {
    "href": "api/Interaction.InteractionController.html",
    "title": "Class InteractionController | TrainAR Documentation",
    "keywords": "Class InteractionController Handles the interactions, i.e. grabbing, releasing, interacting and combining of the TrainARObjects. Inheritance Object InteractionController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class InteractionController : MonoBehaviour Fields | Improve this Doc View Source grabbedObject The object that is currently grabbed by the user. Declaration public GameObject grabbedObject Field Value Type Description GameObject Changed when TrainAR object is grabbed/released. | Improve this Doc View Source grabber Reference to the grabber object, which becomes the parent of a picked up (grabbed) TrainAR-object. Declaration public GameObject grabber Field Value Type Description GameObject One grabber per scene. | Improve this Doc View Source hit Raycast from the center of the screen to detected if a TrainAR object is aimed at. Declaration public RaycastHit hit Field Value Type Description RaycastHit Null if no gameObject is hit. | Improve this Doc View Source intersectedObject Reference to the intersected TrainAR object. Declaration public GameObject intersectedObject Field Value Type Description GameObject Changed when TrainAR object are intersecting. | Improve this Doc View Source isGrabbingObject Changes value when an object is grabbed/released. Declaration public bool isGrabbingObject Field Value Type Description Boolean True if a object is grabbed. | Improve this Doc View Source isIntersecting Changed on intersection. Declaration public bool isIntersecting Field Value Type Description Boolean True if TrainAR objects ar intersecting. | Improve this Doc View Source isSelectingObject Changed when TrainAR object is selected/deselected. Declaration public bool isSelectingObject Field Value Type Description Boolean True if a object is selected. | Improve this Doc View Source selectedObject Reference to the current selected(aimed at) TrainAR object. Declaration public GameObject selectedObject Field Value Type Description GameObject Changed on selection. | Improve this Doc View Source tryedGrabbingObjectUnsuccessfully Value is changed when the grab button is pressed. Declaration public bool tryedGrabbingObjectUnsuccessfully Field Value Type Description Boolean True if a grabbing of an object was not successfull. Methods | Improve this Doc View Source Combine() Invokes the Combine on the TrainARObject Important: This method assumes there is an object selected and it is currently intersecting with another. It also assumes that ARInteractables have an ObjectInteraktionhandler Declaration public void Combine() | Improve this Doc View Source GrabObject() Grab the object that is currently selected by the raycast. Declaration public void GrabObject() | Improve this Doc View Source Interact() Invokes the Interact on the TrainARObject Important: This method assumes there is an object selected! It also assumes that ARInteractables have an ObjectInteraktionhandler Declaration public void Interact() | Improve this Doc View Source ReleaseGrabbedObject() Release the currently grabbed object. Declaration public void ReleaseGrabbedObject()"
  },
  "api/Interaction.MaterialController.html": {
    "href": "api/Interaction.MaterialController.html",
    "title": "Class MaterialController | TrainAR Documentation",
    "keywords": "Class MaterialController Handles material related functionality for one TrainAR object. Inheritance Object MaterialController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class MaterialController : MonoBehaviour Methods | Improve this Doc View Source ActivateErrorIndicator() Play Error outline animation in coroutine Declaration public void ActivateErrorIndicator() | Improve this Doc View Source ActivateOutlines() Activate the Outline of the object Declaration public void ActivateOutlines() | Improve this Doc View Source ActivateSuccessIndicator() Play Success outline animation in coroutine Declaration public void ActivateSuccessIndicator() | Improve this Doc View Source ActivateSuccessIndicator(String) Play Success outline animation in coroutine Declaration public void ActivateSuccessIndicator(string CombinedWith) Parameters Type Name Description String CombinedWith | Improve this Doc View Source ChangeToCombineMaterial() Replaces all materials on the this Object with a material for combining. Declaration public void ChangeToCombineMaterial() | Improve this Doc View Source DeactivateOutlines() Deactivate the Outline of the object Declaration public void DeactivateOutlines() | Improve this Doc View Source resetOriginalMaterial() Resets the current materials back to original materials of the object Declaration public void resetOriginalMaterial() | Improve this Doc View Source setNewOriginalMaterial(GameObject, Material) Change the original material of the given object with to a new material. Declaration public void setNewOriginalMaterial(GameObject gameObject, Material newMaterial) Parameters Type Name Description GameObject gameObject The gameobject where the material is changed. Material newMaterial The new material."
  },
  "api/Interaction.ObjectLerpingController.html": {
    "href": "api/Interaction.ObjectLerpingController.html",
    "title": "Class ObjectLerpingController | TrainAR Documentation",
    "keywords": "Class ObjectLerpingController Handles the lerping towards the camera when an object is grabbed. Inheritance Object ObjectLerpingController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class ObjectLerpingController : MonoBehaviour"
  },
  "api/Interaction.Outline.html": {
    "href": "api/Interaction.Outline.html",
    "title": "Class Outline | TrainAR Documentation",
    "keywords": "Class Outline Inheritance Object Outline Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class Outline : MonoBehaviour Properties | Improve this Doc View Source OutlineColor Declaration public Color OutlineColor { get; set; } Property Value Type Description Color | Improve this Doc View Source OutlineMode Declaration public Outline.Mode OutlineMode { get; set; } Property Value Type Description Outline.Mode | Improve this Doc View Source OutlineWidth Declaration public float OutlineWidth { get; set; } Property Value Type Description Single"
  },
  "api/Interaction.Outline.Mode.html": {
    "href": "api/Interaction.Outline.Mode.html",
    "title": "Enum Outline.Mode | TrainAR Documentation",
    "keywords": "Enum Outline.Mode Different types for the outlines. Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public enum Mode Fields Name Description OutlineAll OutlineAndSilhouette OutlineHidden OutlineVisible SilhouetteOnly"
  },
  "api/Interaction.ResetLostObjectController.html": {
    "href": "api/Interaction.ResetLostObjectController.html",
    "title": "Class ResetLostObjectController | TrainAR Documentation",
    "keywords": "Class ResetLostObjectController Component that resets the TrainAR object back to the original spawn point when its to far away. Inheritance Object ResetLostObjectController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class ResetLostObjectController : MonoBehaviour"
  },
  "api/Interaction.RigidbodyController.html": {
    "href": "api/Interaction.RigidbodyController.html",
    "title": "Class RigidbodyController | TrainAR Documentation",
    "keywords": "Class RigidbodyController The RigidbodyController handles the activation and deactivation of physics. Inheritance Object RigidbodyController Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class RigidbodyController : MonoBehaviour"
  },
  "api/Interaction.TrainARObject.CustomUnityEvent.html": {
    "href": "api/Interaction.TrainARObject.CustomUnityEvent.html",
    "title": "Class TrainARObject.CustomUnityEvent | TrainAR Documentation",
    "keywords": "Class TrainARObject.CustomUnityEvent Inheritance Object TrainARObject.CustomUnityEvent Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax [Serializable] public class CustomUnityEvent : UnityEvent<string>"
  },
  "api/Interaction.TrainARObject.html": {
    "href": "api/Interaction.TrainARObject.html",
    "title": "Class TrainARObject | TrainAR Documentation",
    "keywords": "Class TrainARObject The main class for a TrainAR object. After adding this script all following RequiredComponents are added. SelectionBase, MeshCollider, BoxCollider, RigidbodyController, MaterialController, AudioController, Rigidbody, Outline, CollisionController, AudioSource. The TrainAR events are also defined in this script. Inheritance Object TrainARObject Namespace : Interaction Assembly : Assembly-CSharp.dll Syntax public class TrainARObject : MonoBehaviour Fields | Improve this Doc View Source error Error Declaration public UnityEvent error Field Value Type Description UnityEvent | Improve this Doc View Source interactableName The name of the TrainAR object that is used for the statemachine check. Declaration public string interactableName Field Value Type Description String String based on the object name. | Improve this Doc View Source Intersection The Object this object is intersecting with. Declaration public CollisionController.Intersection Intersection Field Value Type Description CollisionController.Intersection Is set on runtime. | Improve this Doc View Source isCombineable Is the object combineable. Declaration public bool isCombineable Field Value Type Description Boolean If true it is combinable. | Improve this Doc View Source isGrabbable Is the object grabbable. Declaration public bool isGrabbable Field Value Type Description Boolean If true it is grabbable. | Improve this Doc View Source isGrabbed Declaration public bool isGrabbed Field Value Type Description Boolean | Improve this Doc View Source isInteractable Is the object interactable. Declaration public bool isInteractable Field Value Type Description Boolean If true it is interactable. | Improve this Doc View Source isSelected Declaration public bool isSelected Field Value Type Description Boolean | Improve this Doc View Source lerpingDistance The distance to the camera where the object is lerped to. Declaration public float lerpingDistance Field Value Type Description Single Default is 0.2f | Improve this Doc View Source OnCombination Declaration public TrainARObject.CustomUnityEvent OnCombination Field Value Type Description TrainARObject.CustomUnityEvent | Improve this Doc View Source OnDeselect Declaration public UnityEvent OnDeselect Field Value Type Description UnityEvent | Improve this Doc View Source OnGrabbed Declaration public UnityEvent OnGrabbed Field Value Type Description UnityEvent | Improve this Doc View Source OnInteraction Declaration public UnityEvent OnInteraction Field Value Type Description UnityEvent | Improve this Doc View Source OnReleased Declaration public UnityEvent OnReleased Field Value Type Description UnityEvent | Improve this Doc View Source OnSelect Declaration public UnityEvent OnSelect Field Value Type Description UnityEvent | Improve this Doc View Source pivotOffsetPosition Offset the pivot point. Declaration public Vector3 pivotOffsetPosition Field Value Type Description Vector3 Default is (0, 0, 0). | Improve this Doc View Source pivotOffsetRotation Offset the pivot rotation. Declaration public Vector3 pivotOffsetRotation Field Value Type Description Vector3 Default is (0, 0, 0). | Improve this Doc View Source TrainARObjectDisabled If true the object is not selectable, grabbable, interactable, combineable. Declaration public bool TrainARObjectDisabled Field Value Type Description Boolean Default is false. Methods | Improve this Doc View Source Combine(String, GameObject) Sends a request to the statemachine to check if this combine was valid. If so, the combine event of this TrainARObject is invoked otherwise the error event is invoked instead. This does NOT physically combine the object, which has to be handled by hand or e.g. the TrainAR Object helper in the visual scripting. Declaration public void Combine(string combinedWithName, GameObject intersectedObject) Parameters Type Name Description String combinedWithName GameObject intersectedObject | Improve this Doc View Source Deselect() Invokes the Deselect event of this TrainARObject and sets it's isSelected bool accordingly. Declaration public void Deselect() | Improve this Doc View Source DisableTrainARObject() Disables interactions with this TrainARObject by disabling it's colliders and Mesh Renderer. Declaration public void DisableTrainARObject() | Improve this Doc View Source EnableTrainARObject() Enables interactions with this TrainARObject by disabling it's colliders and Mesh Renderer. Declaration public void EnableTrainARObject() | Improve this Doc View Source Error() Invokes the error event of this TrainARObject. Declaration public void Error() | Improve this Doc View Source Grab() Sends a request to the statemachine to check if this grab was valid. If so, the grab event of this TrainARObject is invoked otherwise the error event is invoked instead. This does NOT grab the object, which is handled in the InteractionController Declaration public bool Grab() Returns Type Description Boolean | Improve this Doc View Source Interact(String) Sends a request to the statemachine to check if this interaction was valid. If so, the interact event of this TrainARObject is invoked otherwise the error event is invoked instead. Declaration public void Interact(string parameter = \" \") Parameters Type Name Description String parameter A string parameter which is passed to the statemachine. | Improve this Doc View Source Release() Invokes the Release event of this TrainARObject and sets it's isGrabbed bool accordingly. This does NOT release the object, which is handled in the InteractionController Declaration public void Release() | Improve this Doc View Source Select() Invokes the select event of this TrainARObject and sets it's isSelected bool accordingly. Declaration public void Select()"
  },
  "api/Others.ApplicationRuntimeManager.html": {
    "href": "api/Others.ApplicationRuntimeManager.html",
    "title": "Class ApplicationRuntimeManager | TrainAR Documentation",
    "keywords": "Class ApplicationRuntimeManager Start and Quits Trainings and Application. Inheritance Object ApplicationRuntimeManager Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class ApplicationRuntimeManager : MonoBehaviour Methods | Improve this Doc View Source QuitApplication() Quits the whole Application When in Editor, just stops the preview Declaration public void QuitApplication() | Improve this Doc View Source StartTraining(Int32) Starts a Training with the provided ID Declaration public void StartTraining(int trainingID) Parameters Type Name Description Int32 trainingID"
  },
  "api/Others.ARSessionIsReady.html": {
    "href": "api/Others.ARSessionIsReady.html",
    "title": "Class ARSessionIsReady | TrainAR Documentation",
    "keywords": "Class ARSessionIsReady Detects if the ARSession is loaded and deactivates the loading screen. Inheritance Object ARSessionIsReady Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class ARSessionIsReady : MonoBehaviour"
  },
  "api/Others.html": {
    "href": "api/Others.html",
    "title": "Namespace Others | TrainAR Documentation",
    "keywords": "Namespace Others Classes ApplicationRuntimeManager Start and Quits Trainings and Application. ARSessionIsReady Detects if the ARSession is loaded and deactivates the loading screen. LeaveAndResetARScene Adds basic functionality like leave and reset application and scenarios. MeshCombiner ObjectInsideCollider Detects collisions of the object it is attached to with other objects to enable combination. PrefabSpawningController Handles the initial spawning and positioning as well as the repositioning of the setup prefab. ScenarioCompleted Handles the completion screen shown at the end of the scenarion. SelectionBase //Editor script to always select this object when a child is selected in the Scene view. StartARScene Starts the ARScene after the tutorial is finished. StateRequestSimulator Adds the possibilty to request state changes in the statemachineConnector in editor."
  },
  "api/Others.LeaveAndResetARScene.html": {
    "href": "api/Others.LeaveAndResetARScene.html",
    "title": "Class LeaveAndResetARScene | TrainAR Documentation",
    "keywords": "Class LeaveAndResetARScene Adds basic functionality like leave and reset application and scenarios. Inheritance Object LeaveAndResetARScene Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class LeaveAndResetARScene : MonoBehaviour Methods | Improve this Doc View Source LeaveAndReset() Resets the static variables and returns to the main menu scene. Declaration public void LeaveAndReset() | Improve this Doc View Source QuitApplication() Closes the application. Declaration public void QuitApplication()"
  },
  "api/Others.MeshCombiner.html": {
    "href": "api/Others.MeshCombiner.html",
    "title": "Class MeshCombiner | TrainAR Documentation",
    "keywords": "Class MeshCombiner Inheritance Object MeshCombiner Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class MeshCombiner : MonoBehaviour Properties | Improve this Doc View Source CombineInactiveChildren Declaration public bool CombineInactiveChildren { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CreateMultiMaterialMesh Declaration public bool CreateMultiMaterialMesh { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DeactivateCombinedChildren Declaration public bool DeactivateCombinedChildren { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DeactivateCombinedChildrenMeshRenderers Declaration public bool DeactivateCombinedChildrenMeshRenderers { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DestroyCombinedChildren Declaration public bool DestroyCombinedChildren { get; set; } Property Value Type Description Boolean | Improve this Doc View Source FolderPath Declaration public string FolderPath { get; set; } Property Value Type Description String | Improve this Doc View Source GenerateUVMap Declaration public bool GenerateUVMap { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source CombineMeshes(Boolean) Combine children's Meshes into one Mesh. Set 'showCreatedMeshInfo' to true if want to show info about created Mesh in the console. Declaration public void CombineMeshes(bool showCreatedMeshInfo) Parameters Type Name Description Boolean showCreatedMeshInfo"
  },
  "api/Others.ObjectInsideCollider.html": {
    "href": "api/Others.ObjectInsideCollider.html",
    "title": "Class ObjectInsideCollider | TrainAR Documentation",
    "keywords": "Class ObjectInsideCollider Detects collisions of the object it is attached to with other objects to enable combination. Inheritance Object ObjectInsideCollider Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class ObjectInsideCollider : MonoBehaviour Fields | Improve this Doc View Source combinedWithName Temporary store of the name of the collided object. Declaration public string combinedWithName Field Value Type Description String"
  },
  "api/Others.PrefabSpawningController.html": {
    "href": "api/Others.PrefabSpawningController.html",
    "title": "Class PrefabSpawningController | TrainAR Documentation",
    "keywords": "Class PrefabSpawningController Handles the initial spawning and positioning as well as the repositioning of the setup prefab. Inheritance Object PrefabSpawningController Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class PrefabSpawningController : MonoBehaviour Fields | Improve this Doc View Source instantiatedPrefab Reference to the spawned prefab. Declaration public static GameObject instantiatedPrefab Field Value Type Description GameObject Gets created on runtime. | Improve this Doc View Source objectWasSpawned Is the prefab spawned. Declaration public bool objectWasSpawned Field Value Type Description Boolean True if spawned. | Improve this Doc View Source placementPoseIsValid Is the attempted placement pose valid. Declaration public bool placementPoseIsValid Field Value Type Description Boolean True if valid. Methods | Improve this Doc View Source GetSpawnedObject() Returns the instantiated prefab. Declaration public GameObject GetSpawnedObject() Returns Type Description GameObject The instantiated prefab. | Improve this Doc View Source Reposition() Restarts the positioning process to make reposition of the prefab possible. Declaration public void Reposition() Events | Improve this Doc View Source prefabSpawned Event that is triggered after the prefab is spawned. Declaration public static event Action prefabSpawned Event Type Type Description Action | Improve this Doc View Source RepositionPrefab Event that is triggered after repositioning of the prefab. Declaration public static event Action RepositionPrefab Event Type Type Description Action"
  },
  "api/Others.ScenarioCompleted.html": {
    "href": "api/Others.ScenarioCompleted.html",
    "title": "Class ScenarioCompleted | TrainAR Documentation",
    "keywords": "Class ScenarioCompleted Handles the completion screen shown at the end of the scenarion. Inheritance Object ScenarioCompleted Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class ScenarioCompleted : MonoBehaviour"
  },
  "api/Others.SelectionBase.html": {
    "href": "api/Others.SelectionBase.html",
    "title": "Class SelectionBase | TrainAR Documentation",
    "keywords": "Class SelectionBase //Editor script to always select this object when a child is selected in the Scene view. Inheritance Object SelectionBase Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class SelectionBase : MonoBehaviour"
  },
  "api/Others.StartARScene.html": {
    "href": "api/Others.StartARScene.html",
    "title": "Class StartARScene | TrainAR Documentation",
    "keywords": "Class StartARScene Starts the ARScene after the tutorial is finished. Inheritance Object StartARScene Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class StartARScene : MonoBehaviour Methods | Improve this Doc View Source LoadArScene() Loads the (main) AR scene Declaration public void LoadArScene() | Improve this Doc View Source QuitApplication() Closes the Application. Declaration public void QuitApplication()"
  },
  "api/Others.StateRequestSimulator.html": {
    "href": "api/Others.StateRequestSimulator.html",
    "title": "Class StateRequestSimulator | TrainAR Documentation",
    "keywords": "Class StateRequestSimulator Adds the possibilty to request state changes in the statemachineConnector in editor. Inheritance Object StateRequestSimulator Namespace : Others Assembly : Assembly-CSharp.dll Syntax public class StateRequestSimulator : MonoBehaviour Fields | Improve this Doc View Source interactionType What kind of interaction should be requested. Declaration public InteractionType interactionType Field Value Type Description InteractionType Default is Interact. | Improve this Doc View Source parameter What parameter should be requested. Declaration public string parameter Field Value Type Description String Default is \"\". | Improve this Doc View Source primaryObjectName What is the gameObject name of the first object. Declaration public string primaryObjectName Field Value Type Description String Default is \"\". | Improve this Doc View Source secondaryObjectName What is the gameObject name of the second object. Declaration public string secondaryObjectName Field Value Type Description String Default is \"\"."
  },
  "api/Static.CustomAction.html": {
    "href": "api/Static.CustomAction.html",
    "title": "Class CustomAction | TrainAR Documentation",
    "keywords": "Class CustomAction Custom actions are actions triggered by events outside of Interacting or combining (e.g. UI quizes) and can send parameters that are then checked against the statemachine. Inheritance Object CustomAction Namespace : Static Assembly : Assembly-CSharp.dll Syntax public class CustomAction : MonoBehaviour Methods | Improve this Doc View Source DynamicTrigger(String) Triggers a CustomAction with the given parameter. Declaration public void DynamicTrigger(string parameter) Parameters Type Name Description String parameter The parameter to be checked against the statemachine. | Improve this Doc View Source StaticTrigger(String) Triggers a CustomAction with the given parameter from a static context. Declaration public static bool StaticTrigger(string parameter) Parameters Type Name Description String parameter The parameter to be checked against the statemachine. Returns Type Description Boolean Whether this was a correct statechange and triggered to statemachine to proceed."
  },
  "api/Static.html": {
    "href": "api/Static.html",
    "title": "Namespace Static | TrainAR Documentation",
    "keywords": "Namespace Static Classes CustomAction Custom actions are actions triggered by events outside of Interacting or combining (e.g. UI quizes) and can send parameters that are then checked against the statemachine. StatemachineConnector The StatemachineConnector connects the visual scripting with the gamelogic. Either the visual statemachien decides whether actions are correct or wrong (default) or the connection can also be commented out and the decisions on wrong/correct actions can be made manually in the RequestStateChange method. Structs StateInformation The information stored for ever state that is registered Enums InteractionType The Interaction type that was used with a state change."
  },
  "api/Static.InteractionType.html": {
    "href": "api/Static.InteractionType.html",
    "title": "Enum InteractionType | TrainAR Documentation",
    "keywords": "Enum InteractionType The Interaction type that was used with a state change. Namespace : Static Assembly : Assembly-CSharp.dll Syntax public enum InteractionType Fields Name Description Combine Custom Deselect Grab Interact Release Select"
  },
  "api/Static.StateInformation.html": {
    "href": "api/Static.StateInformation.html",
    "title": "Struct StateInformation | TrainAR Documentation",
    "keywords": "Struct StateInformation The information stored for ever state that is registered Namespace : Static Assembly : Assembly-CSharp.dll Syntax public struct StateInformation Constructors | Improve this Doc View Source StateInformation(String, String, InteractionType, String, GameObject, GameObject) Declaration public StateInformation(string primaryObjectName = \"\", string secondaryObjectName = \"\", InteractionType interactionType = InteractionType.Custom, string parameter = \" \", GameObject firstGameObject = null, GameObject secondGameObject = null) Parameters Type Name Description String primaryObjectName String secondaryObjectName InteractionType interactionType String parameter GameObject firstGameObject GameObject secondGameObject Fields | Improve this Doc View Source firstGameObject Declaration public GameObject firstGameObject Field Value Type Description GameObject | Improve this Doc View Source interactionType Declaration public InteractionType interactionType Field Value Type Description InteractionType | Improve this Doc View Source parameter Declaration public string parameter Field Value Type Description String | Improve this Doc View Source primaryObjectName Declaration public string primaryObjectName Field Value Type Description String | Improve this Doc View Source secondaryObjectName Declaration public string secondaryObjectName Field Value Type Description String | Improve this Doc View Source secondGameObject Declaration public GameObject secondGameObject Field Value Type Description GameObject"
  },
  "api/Static.StatemachineConnector.html": {
    "href": "api/Static.StatemachineConnector.html",
    "title": "Class StatemachineConnector | TrainAR Documentation",
    "keywords": "Class StatemachineConnector The StatemachineConnector connects the visual scripting with the gamelogic. Either the visual statemachien decides whether actions are correct or wrong (default) or the connection can also be commented out and the decisions on wrong/correct actions can be made manually in the RequestStateChange method. Inheritance Object StatemachineConnector Namespace : Static Assembly : Assembly-CSharp.dll Syntax public class StatemachineConnector Fields | Improve this Doc View Source errorCounter The total errors Declaration public int errorCounter Field Value Type Description Int32 | Improve this Doc View Source Instance The static instance of this statemachineConnector Declaration public static StatemachineConnector Instance Field Value Type Description StatemachineConnector Methods | Improve this Doc View Source AcceptedStateChange(Boolean) Called by the state machine, triggers an Action that indicates if the state change was accepted. Declaration public void AcceptedStateChange(bool stateChangeAccepted) Parameters Type Name Description Boolean stateChangeAccepted Is the statechange accepted | Improve this Doc View Source RegisterNewStateChangeTrigger(Func<StateInformation, Boolean>) Registers a new state change trigger from the visual state flow Declaration public static void RegisterNewStateChangeTrigger(Func<StateInformation, bool> action) Parameters Type Name Description Func < StateInformation , Boolean > action The Func to that is registered | Improve this Doc View Source RequestStateChange(StateInformation) Request a statechange from the statemachine Declaration public bool RequestStateChange(StateInformation stateInformation) Parameters Type Name Description StateInformation stateInformation Returns Type Description Boolean | Improve this Doc View Source Reset() Resets the instance of this static instance Declaration public void Reset() | Improve this Doc View Source ShowCompletionOverlay() Triggers the scenario completion overlay. Declaration public void ShowCompletionOverlay() | Improve this Doc View Source ShowErrorOverlay(String, String) Called by the visual state machine, triggers an Action that shows the error overlay Declaration public void ShowErrorOverlay(string headerText, string errorText) Parameters Type Name Description String headerText The Header of the error overlay String errorText The text body of the error overlay | Improve this Doc View Source ShowExpertInsights(AudioClip, Sprite, String) Called by the visual state machine, triggers an Action that shows the expert insight modality and plays an audio clip Declaration public void ShowExpertInsights(AudioClip audio, Sprite image, string text) Parameters Type Name Description AudioClip audio The audioclip that is played with the expert insight Sprite image The image that is displayed, e.g. the expert providing the insight. String text The text displayed at the expert speechbubble | Improve this Doc View Source StartQuestionUI(QuestionnaireController.QuestionUITypes, String, List<QuestionnaireController.Answer>) Triggers a Questiontype on the UI. Declaration public void StartQuestionUI(QuestionnaireController.QuestionUITypes type, string question, List<QuestionnaireController.Answer> answers) Parameters Type Name Description QuestionnaireController.QuestionUITypes type The type of Question(MultipleChoice, List, Input). String question The question. List < QuestionnaireController.Answer > answers A List of struct with all possible answers. | Improve this Doc View Source UpdateTopPanel(String, Int32) Called by the visual state machine, triggers an Action that updates the instruction text and completion percentage of the top panel Declaration public void UpdateTopPanel(string text, int completionPercentage) Parameters Type Name Description String text New instruction displayed on the top panel Int32 completionPercentage New compeltion percentage displayed Events | Improve this Doc View Source TriggerAcceptedStateChange Declaration public event Action<bool> TriggerAcceptedStateChange Event Type Type Description Action < Boolean > | Improve this Doc View Source TriggerErrorOverlay Declaration public event Action<string, string> TriggerErrorOverlay Event Type Type Description Action < String , String > | Improve this Doc View Source TriggerExpertInsights Declaration public event Action<AudioClip, Sprite, string> TriggerExpertInsights Event Type Type Description Action < AudioClip , Sprite , String > | Improve this Doc View Source TriggerScenarioCompletionOverlay Declaration public event Action TriggerScenarioCompletionOverlay Event Type Type Description Action | Improve this Doc View Source TriggerTopPanelChange Declaration public event Action<string, int> TriggerTopPanelChange Event Type Type Description Action < String , Int32 > | Improve this Doc View Source TriggerUIQuestion Declaration public event Action<QuestionnaireController.QuestionUITypes, string, List<QuestionnaireController.Answer>> TriggerUIQuestion Event Type Type Description Action < QuestionnaireController.QuestionUITypes , String , List < QuestionnaireController.Answer >>"
  },
  "api/Tracking.FetchAspectRatioFromARCamera.html": {
    "href": "api/Tracking.FetchAspectRatioFromARCamera.html",
    "title": "Class FetchAspectRatioFromARCamera | TrainAR Documentation",
    "keywords": "Class FetchAspectRatioFromARCamera Fetches the projectionmatrix from one camera and diretly applies it to another one Inheritance Object FetchAspectRatioFromARCamera Namespace : Tracking Assembly : Assembly-CSharp.dll Syntax public class FetchAspectRatioFromARCamera : MonoBehaviour"
  },
  "api/Tracking.html": {
    "href": "api/Tracking.html",
    "title": "Namespace Tracking | TrainAR Documentation",
    "keywords": "Namespace Tracking Classes FetchAspectRatioFromARCamera Fetches the projectionmatrix from one camera and diretly applies it to another one"
  },
  "api/UI.CrosshairOnOff.html": {
    "href": "api/UI.CrosshairOnOff.html",
    "title": "Class CrosshairOnOff | TrainAR Documentation",
    "keywords": "Class CrosshairOnOff Controls the dynamic transformations of the crosshair. Inheritance Object CrosshairOnOff Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class CrosshairOnOff : MonoBehaviour Methods | Improve this Doc View Source Start() Sets reference for the interactionController and the cursor_rt. Declaration public void Start() | Improve this Doc View Source Update() Enable/Disables the cursor depending if a object is grabbed. Declaration public void Update()"
  },
  "api/UI.DirectInfoController.html": {
    "href": "api/UI.DirectInfoController.html",
    "title": "Class DirectInfoController | TrainAR Documentation",
    "keywords": "Class DirectInfoController Handles the displaying of direct info boxes. Inheritance Object DirectInfoController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class DirectInfoController : MonoBehaviour"
  },
  "api/UI.ErrorOverlayController.html": {
    "href": "api/UI.ErrorOverlayController.html",
    "title": "Class ErrorOverlayController | TrainAR Documentation",
    "keywords": "Class ErrorOverlayController Handles the Error overlay, triggers it on actions from the statemachine and sets its texts Inheritance Object ErrorOverlayController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class ErrorOverlayController : MonoBehaviour"
  },
  "api/UI.html": {
    "href": "api/UI.html",
    "title": "Namespace UI | TrainAR Documentation",
    "keywords": "Namespace UI Classes CrosshairOnOff Controls the dynamic transformations of the crosshair. DirectInfoController Handles the displaying of direct info boxes. ErrorOverlayController Handles the Error overlay, triggers it on actions from the statemachine and sets its texts InputFieldAdjust Adjusts the UI of the Input field when opened InteractButton Handles interactions with the interact button. InteractionButtonController Handles the behaviour of the interaction buttons, such as enabling and disabling when appropriate or highlighting when a combine is possible. OnBoardingController Handles the displaying of the Onboarding animations for placing the Setup-Prefab. OpenSidePanel Handles opening or closing of the side panel. Question Abstract class for questions to share same ui functions. QuestionnaireController The QuestionaireController implements the functions to control the input field questions, reqular question and question lists. The input field question opens the keyboard and recives any given input. The regular question opens a question with up to four answers. the question list opens a list with answers and continues when all right answer are taken. SaveArea The safeArea scripts moves UI components when they would otherwise be occluded by e.g. cutout cameras or speakers on some newer smartphone models. StreamVideo Handles playing of the onboarding animations. TopPanelController Handles Updates to the TopPanel showing the instructions and progress of the training Structs QuestionnaireController.Answer Holder for information for one answer. Enums QuestionnaireController.QuestionUITypes"
  },
  "api/UI.InputFieldAdjust.html": {
    "href": "api/UI.InputFieldAdjust.html",
    "title": "Class InputFieldAdjust | TrainAR Documentation",
    "keywords": "Class InputFieldAdjust Adjusts the UI of the Input field when opened Inheritance Object InputFieldAdjust Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class InputFieldAdjust : MonoBehaviour Methods | Improve this Doc View Source AdjustInputFieldPosition() Adjusts the position of the Inputfield UI when the Android or iOS keyboard is opened. Declaration public void AdjustInputFieldPosition()"
  },
  "api/UI.InteractButton.html": {
    "href": "api/UI.InteractButton.html",
    "title": "Class InteractButton | TrainAR Documentation",
    "keywords": "Class InteractButton Handles interactions with the interact button. Inheritance Object InteractButton Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class InteractButton : MonoBehaviour Methods | Improve this Doc View Source ReleaseInteract() Calls either an interact or an combine, depending on the interactioncontroller context. Declaration public void ReleaseInteract()"
  },
  "api/UI.InteractionButtonController.html": {
    "href": "api/UI.InteractionButtonController.html",
    "title": "Class InteractionButtonController | TrainAR Documentation",
    "keywords": "Class InteractionButtonController Handles the behaviour of the interaction buttons, such as enabling and disabling when appropriate or highlighting when a combine is possible. Inheritance Object InteractionButtonController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class InteractionButtonController : MonoBehaviour Fields | Improve this Doc View Source grabbedObjectRotationSpeed The speed that a grabbed object is rotated. Declaration public float grabbedObjectRotationSpeed Field Value Type Description Single Default is 0.2f. Methods | Improve this Doc View Source ActivateInteractButtons() Makes the buttons visible. Declaration public void ActivateInteractButtons() | Improve this Doc View Source DeactivateInteractButtons() Makes the buttons invisible. Declaration public void DeactivateInteractButtons() | Improve this Doc View Source GrabRelease() What happens when the \"Grab\"-Button is pressed. Declaration public void GrabRelease()"
  },
  "api/UI.OnBoardingController.html": {
    "href": "api/UI.OnBoardingController.html",
    "title": "Class OnBoardingController | TrainAR Documentation",
    "keywords": "Class OnBoardingController Handles the displaying of the Onboarding animations for placing the Setup-Prefab. Inheritance Object OnBoardingController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class OnBoardingController : MonoBehaviour"
  },
  "api/UI.OpenSidePanel.html": {
    "href": "api/UI.OpenSidePanel.html",
    "title": "Class OpenSidePanel | TrainAR Documentation",
    "keywords": "Class OpenSidePanel Handles opening or closing of the side panel. Inheritance Object OpenSidePanel Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class OpenSidePanel : MonoBehaviour Methods | Improve this Doc View Source TogglePanel() Opens or closes the Panel. Declaration public void TogglePanel()"
  },
  "api/UI.Question.html": {
    "href": "api/UI.Question.html",
    "title": "Class Question | TrainAR Documentation",
    "keywords": "Class Question Abstract class for questions to share same ui functions. Inheritance Object Question Namespace : UI Assembly : Assembly-CSharp.dll Syntax public abstract class Question Fields | Improve this Doc View Source questionText Every question needs a questionText. Declaration public string questionText Field Value Type Description String"
  },
  "api/UI.QuestionnaireController.Answer.html": {
    "href": "api/UI.QuestionnaireController.Answer.html",
    "title": "Struct QuestionnaireController.Answer | TrainAR Documentation",
    "keywords": "Struct QuestionnaireController.Answer Holder for information for one answer. Namespace : UI Assembly : Assembly-CSharp.dll Syntax public struct Answer Constructors | Improve this Doc View Source Answer(String, String, Boolean) Constructor for Answers. Declaration public Answer(string answer, string answerFeedback, bool answerCorrect) Parameters Type Name Description String answer Text of the answer. String answerFeedback Text for feedback when the answer was taken. Boolean answerCorrect True if the answer is right. Fields | Improve this Doc View Source answer Text of the answer. Declaration public string answer Field Value Type Description String Set by constructor. | Improve this Doc View Source answerCorrect Is this answer right or wrong. Declaration public bool answerCorrect Field Value Type Description Boolean Set by constructor. | Improve this Doc View Source answerFeedback Text of the feedback. Declaration public string answerFeedback Field Value Type Description String Set by constructor."
  },
  "api/UI.QuestionnaireController.html": {
    "href": "api/UI.QuestionnaireController.html",
    "title": "Class QuestionnaireController | TrainAR Documentation",
    "keywords": "Class QuestionnaireController The QuestionaireController implements the functions to control the input field questions, reqular question and question lists. The input field question opens the keyboard and recives any given input. The regular question opens a question with up to four answers. the question list opens a list with answers and continues when all right answer are taken. Inheritance Object QuestionnaireController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class QuestionnaireController : MonoBehaviour Fields | Improve this Doc View Source ButtonBlueprint Reference to the AnswerButtonPrefab. Declaration public Button ButtonBlueprint Field Value Type Description Button Set in inspector. | Improve this Doc View Source buttons References to the Buttons Declaration public List<Button> buttons Field Value Type Description List < Button > Set in inspector. | Improve this Doc View Source correctAnswerColor Color for correct answers. Declaration public Color correctAnswerColor Field Value Type Description Color Default set in inspector. | Improve this Doc View Source correctAnswerSound Audioclip that is played when correct answer is pressed. Declaration public AudioClip correctAnswerSound Field Value Type Description AudioClip Default is set in inspector. | Improve this Doc View Source defaultUIColor Color for unpressed buttons. Declaration public Color defaultUIColor Field Value Type Description Color Default set in inspector. | Improve this Doc View Source duration How long it takes to fade in the UI. Declaration public float duration Field Value Type Description Single Default is 1.0f seconds. | Improve this Doc View Source inputFieldAnswerText Reference to the inputFieldAnswerText. Declaration public TextMeshProUGUI inputFieldAnswerText Field Value Type Description TextMeshProUGUI Set in inspector. | Improve this Doc View Source inputFieldQuestionText Reference to the inputFieldQuestionText. Declaration public TextMeshProUGUI inputFieldQuestionText Field Value Type Description TextMeshProUGUI Set in inspector. | Improve this Doc View Source inputFieldQuestionUI Reference to the root gameObject of the inputFieldUI. Declaration public GameObject inputFieldQuestionUI Field Value Type Description GameObject Set in inspector. | Improve this Doc View Source questionList Reference to the root of the question list UI. Declaration public GameObject questionList Field Value Type Description GameObject Set in inspector. | Improve this Doc View Source questionListQuestionText Reference to the QuestionListText. Declaration public TextMeshProUGUI questionListQuestionText Field Value Type Description TextMeshProUGUI Set in inspector. | Improve this Doc View Source questionnaireUIRectTransform Reference to the UIRectTransform. Declaration public RectTransform questionnaireUIRectTransform Field Value Type Description RectTransform Set in inspector. | Improve this Doc View Source questionText Reference to the questionText. Declaration public TextMeshProUGUI questionText Field Value Type Description TextMeshProUGUI Set in inspector. | Improve this Doc View Source questionTextUI Reference to the questionText. Declaration public GameObject questionTextUI Field Value Type Description GameObject Set in inspector. | Improve this Doc View Source regularQuestionUI Reference to the root gameObject of the regularQuestionUI. Declaration public GameObject regularQuestionUI Field Value Type Description GameObject Set in inspector. | Improve this Doc View Source responseText Reference to the ResponseText. Declaration public GameObject responseText Field Value Type Description GameObject Set in inspector. | Improve this Doc View Source rightAnswer Stores right answers for endscreen UI. Declaration public List<string> rightAnswer Field Value Type Description List < String > Set on runtime. | Improve this Doc View Source wrongAnswerColor Color for wrong answers. Declaration public Color wrongAnswerColor Field Value Type Description Color Default set in inspector. | Improve this Doc View Source wrongAnsweredQuestions Stores wrong answered questions for endscreen UI. Declaration public List<string> wrongAnsweredQuestions Field Value Type Description List < String > Set on runtime. | Improve this Doc View Source wrongAnswers Stores wrong answers for endscreen UI. Declaration public List<string> wrongAnswers Field Value Type Description List < String > Set on runtime. | Improve this Doc View Source wrongAnswerSound Audioclip that is played when wrong answer is pressed. Declaration public AudioClip wrongAnswerSound Field Value Type Description AudioClip Default is set in inspector. Methods | Improve this Doc View Source ContinueButtonOnClick() Get's called when the continue button is pressed. When the chosen answer was correct, the statemachine gets notified. When the chosen answer was wrong, the question gets displayed again. Declaration public void ContinueButtonOnClick() | Improve this Doc View Source InitInputfield(String) Open the inputField question UI. Declaration public void InitInputfield(string question) Parameters Type Name Description String question Text of the question. | Improve this Doc View Source InitQuestion(String, List<QuestionnaireController.Answer>) Open the regular question UI. Declaration public void InitQuestion(string question, List<QuestionnaireController.Answer> answers) Parameters Type Name Description String question Text of the question. List < QuestionnaireController.Answer > answers List of all possible answers. | Improve this Doc View Source InitQuestionList(String, List<QuestionnaireController.Answer>) Open the questionList UI. Declaration public void InitQuestionList(string question, List<QuestionnaireController.Answer> answers) Parameters Type Name Description String question Text of the question. List < QuestionnaireController.Answer > answers List of all possbile answers. | Improve this Doc View Source NotifyStatemachine(String, QuestionnaireController.QuestionUITypes) Notify the statemachine with the result of the question UI. Declaration public void NotifyStatemachine(string value, QuestionnaireController.QuestionUITypes type = QuestionnaireController.QuestionUITypes.Question) Parameters Type Name Description String value Result in text form. QuestionnaireController.QuestionUITypes type Type of question. | Improve this Doc View Source QuestionInputValidate() Validate if given input of the inputQuestion UI was correct. Declaration public void QuestionInputValidate()"
  },
  "api/UI.QuestionnaireController.QuestionUITypes.html": {
    "href": "api/UI.QuestionnaireController.QuestionUITypes.html",
    "title": "Enum QuestionnaireController.QuestionUITypes | TrainAR Documentation",
    "keywords": "Enum QuestionnaireController.QuestionUITypes Namespace : UI Assembly : Assembly-CSharp.dll Syntax public enum QuestionUITypes Fields Name Description InputQuestion Question QuestionList"
  },
  "api/UI.SaveArea.html": {
    "href": "api/UI.SaveArea.html",
    "title": "Class SaveArea | TrainAR Documentation",
    "keywords": "Class SaveArea The safeArea scripts moves UI components when they would otherwise be occluded by e.g. cutout cameras or speakers on some newer smartphone models. Inheritance Object SaveArea Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class SaveArea : MonoBehaviour"
  },
  "api/UI.StreamVideo.html": {
    "href": "api/UI.StreamVideo.html",
    "title": "Class StreamVideo | TrainAR Documentation",
    "keywords": "Class StreamVideo Handles playing of the onboarding animations. Inheritance Object StreamVideo Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class StreamVideo : MonoBehaviour Methods | Improve this Doc View Source StartVideo() Starts playing the specified video. Declaration public void StartVideo()"
  },
  "api/UI.TopPanelController.html": {
    "href": "api/UI.TopPanelController.html",
    "title": "Class TopPanelController | TrainAR Documentation",
    "keywords": "Class TopPanelController Handles Updates to the TopPanel showing the instructions and progress of the training Inheritance Object TopPanelController Namespace : UI Assembly : Assembly-CSharp.dll Syntax public class TopPanelController : MonoBehaviour Fields | Improve this Doc View Source errorColor Declaration public Color errorColor Field Value Type Description Color | Improve this Doc View Source successColor Declaration public Color successColor Field Value Type Description Color"
  },
  "api/Visual_Scripting.Action.html": {
    "href": "api/Visual_Scripting.Action.html",
    "title": "Class Action | TrainAR Documentation",
    "keywords": "Class Action Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine Inheritance Object Action Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class Action : Unit Fields | Improve this Doc View Source actionChoice What type of actions are in this node. Declaration public Action.TrainARActionChoices actionChoice Field Value Type Description Action.TrainARActionChoices Set in node in the editor. Default is Interaction. Properties | Improve this Doc View Source ARCombinableName1 The Name of the first correct interactable for this step. Declaration public ValueInput ARCombinableName1 { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source ARCombinableName2 The Name of the second correct interactable for this step. Declaration public ValueInput ARCombinableName2 { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source ARInteractableName The Name of the correct interactable for this step. Declaration public ValueInput ARInteractableName { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source CorrectAction The Output port of the Unity that is triggered when the users interaction was CORRECT. Declaration public ControlOutput CorrectAction { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source CorrectParameterText The correct parameter for the custom event. Declaration public ValueInput CorrectParameterText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source graphReference The Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers. Declaration public GraphReference graphReference { get; } Property Value Type Description GraphReference Set in node in the editor. | Improve this Doc View Source IncorrectAction The Output port of the Unity that is triggered when the users interaction was INCORRECT. Declaration public ControlOutput IncorrectAction { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.Action.TrainARActionChoices.html": {
    "href": "api/Visual_Scripting.Action.TrainARActionChoices.html",
    "title": "Enum Action.TrainARActionChoices | TrainAR Documentation",
    "keywords": "Enum Action.TrainARActionChoices Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public enum TrainARActionChoices Fields Name Description Combination CustomAction Interaction"
  },
  "api/Visual_Scripting.ActionFork.html": {
    "href": "api/Visual_Scripting.ActionFork.html",
    "title": "Class ActionFork | TrainAR Documentation",
    "keywords": "Class ActionFork Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine Inheritance Object ActionFork Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class ActionFork : Unit Fields | Improve this Doc View Source actionChoice What type of actions are in this node. Declaration public ActionFork.TrainARActionChoices actionChoice Field Value Type Description ActionFork.TrainARActionChoices Set in node in the editor. Default is Interaction. | Improve this Doc View Source actionCount How many actions are in this node. Declaration public int actionCount Field Value Type Description Int32 Set in node in the editor.Default is 1. Properties | Improve this Doc View Source ARCombinableName1s The Name of the first correct interactable for this step. Declaration public List<ValueInput> ARCombinableName1s { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source ARCombinableName2s The Name of the second correct interactable for this step. Declaration public List<ValueInput> ARCombinableName2s { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source ARInteractableNames The Name of the correct interactable for this step. Declaration public List<ValueInput> ARInteractableNames { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source CorrectActions The Output port of the Unity that is triggered when the users interaction was CORRECT. Declaration public List<ControlOutput> CorrectActions { get; } Property Value Type Description List < ControlOutput > Set in node in the editor. | Improve this Doc View Source CorrectParameterTexts The correct parameter for the custom event. Declaration public List<ValueInput> CorrectParameterTexts { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source graphReference The Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers. Declaration public GraphReference graphReference { get; } Property Value Type Description GraphReference Set in node in the editor. | Improve this Doc View Source IncorrectAction The Output port of the Unity that is triggered when the users interaction was INCORRECT. Declaration public ControlOutput IncorrectAction { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.ActionFork.TrainARActionChoices.html": {
    "href": "api/Visual_Scripting.ActionFork.TrainARActionChoices.html",
    "title": "Enum ActionFork.TrainARActionChoices | TrainAR Documentation",
    "keywords": "Enum ActionFork.TrainARActionChoices Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public enum TrainARActionChoices Fields Name Description Combination CustomAction Interaction"
  },
  "api/Visual_Scripting.ActionMulti.html": {
    "href": "api/Visual_Scripting.ActionMulti.html",
    "title": "Class ActionMulti | TrainAR Documentation",
    "keywords": "Class ActionMulti Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine Inheritance Object ActionMulti Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class ActionMulti : Unit Fields | Improve this Doc View Source actionChoice Declaration public ActionMulti.TrainARActionChoices actionChoice Field Value Type Description ActionMulti.TrainARActionChoices | Improve this Doc View Source actionCount Declaration public int actionCount Field Value Type Description Int32 Properties | Improve this Doc View Source AllActionsCorrect The Output port of the Unity that is triggered when the users interaction was CORRECT. Declaration public ControlOutput AllActionsCorrect { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source ARCombinableName1s The Name of the first correct interactable for this step. Declaration public List<ValueInput> ARCombinableName1s { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source ARCombinableName2s The Name of the second correct interactable for this step. Declaration public List<ValueInput> ARCombinableName2s { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source ARInteractableNames The Name of the correct interactable for this step. Declaration public List<ValueInput> ARInteractableNames { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source CorrectParameterTexts The correct parameter for the custom event. Declaration public List<ValueInput> CorrectParameterTexts { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source graphReference The Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers. Declaration public GraphReference graphReference { get; } Property Value Type Description GraphReference Set in node in the editor. | Improve this Doc View Source IncorrectAction The Output port of the Unity that is triggered when the users interaction was INCORRECT. Declaration public ControlOutput IncorrectAction { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.ActionMulti.TrainARActionChoices.html": {
    "href": "api/Visual_Scripting.ActionMulti.TrainARActionChoices.html",
    "title": "Enum ActionMulti.TrainARActionChoices | TrainAR Documentation",
    "keywords": "Enum ActionMulti.TrainARActionChoices Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public enum TrainARActionChoices Fields Name Description Combination CustomAction Interaction"
  },
  "api/Visual_Scripting.ActionUI.html": {
    "href": "api/Visual_Scripting.ActionUI.html",
    "title": "Class ActionUI | TrainAR Documentation",
    "keywords": "Class ActionUI Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine Inheritance Object ActionUI Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class ActionUI : Unit Fields | Improve this Doc View Source actionChoice The Input port of the Unit that triggers the internal logic. Declaration public ActionUI.TrainARUIActionChoices actionChoice Field Value Type Description ActionUI.TrainARUIActionChoices Set in node in the editor | Improve this Doc View Source correctAnswers The Input port of the Unit that triggers the internal logic. Declaration public int correctAnswers Field Value Type Description Int32 Set in node in the editor. Default is 2. | Improve this Doc View Source wrongAnswers The Input port of the Unit that triggers the internal logic. Declaration public int wrongAnswers Field Value Type Description Int32 Set in node in the editor. Default is 2. Properties | Improve this Doc View Source CorrectAction The Output port of the Unity that is triggered when the users interaction was CORRECT. Declaration public List<ControlOutput> CorrectAction { get; } Property Value Type Description List < ControlOutput > Set in node in the editor. | Improve this Doc View Source CorrectAnswers The Texts for the correct answers for this step. Declaration public List<ValueInput> CorrectAnswers { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source CorrectAnswersFeedback The Texts for the correct answers for this step. Declaration public List<ValueInput> CorrectAnswersFeedback { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source graphReference The Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers. Declaration public GraphReference graphReference { get; } Property Value Type Description GraphReference Set in node in the editor. | Improve this Doc View Source IncorrectAction The Output port of the Unity that is triggered when the users interaction was INCORRECT. Declaration public List<ControlOutput> IncorrectAction { get; } Property Value Type Description List < ControlOutput > Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. | Improve this Doc View Source Question The Text for the question for this step. Declaration public ValueInput Question { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source WrongAnswers The Texts for the wrong answers for this step. Declaration public List<ValueInput> WrongAnswers { get; } Property Value Type Description List < ValueInput > Set in node in the editor. | Improve this Doc View Source WrongAnswersFeedback The Texts for the wrong answers for this step. Declaration public List<ValueInput> WrongAnswersFeedback { get; } Property Value Type Description List < ValueInput > Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.ActionUI.TrainARUIActionChoices.html": {
    "href": "api/Visual_Scripting.ActionUI.TrainARUIActionChoices.html",
    "title": "Enum ActionUI.TrainARUIActionChoices | TrainAR Documentation",
    "keywords": "Enum ActionUI.TrainARUIActionChoices Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public enum TrainARUIActionChoices Fields Name Description InputField ListSelection Questionnaire"
  },
  "api/Visual_Scripting.Conclusion.html": {
    "href": "api/Visual_Scripting.Conclusion.html",
    "title": "Class Conclusion | TrainAR Documentation",
    "keywords": "Class Conclusion Triggers the Completion overlay of the scenario and ends the stategraph. Inheritance Object Conclusion Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class Conclusion : Unit Properties | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input and value ports As this terminates the scenario, there is no output port or flow, the rest is handled through the script-based components in the framework. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.Feedback.html": {
    "href": "api/Visual_Scripting.Feedback.html",
    "title": "Class Feedback | TrainAR Documentation",
    "keywords": "Class Feedback Implements the \"Feedback\" functionality of the TrainAR Framework, therefore it triggers the error overlay modality to show feedback (e.g. for an incorrect important action). Inheritance Object Feedback Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class Feedback : Unit Properties | Improve this Doc View Source ErrorText The Error text that is displayed for the current step. Declaration public ValueInput ErrorText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source HeaderText The Header text that is displayed for the current step. Declaration public ValueInput HeaderText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. | Improve this Doc View Source OutputFlow The Output port of the Unit that is tirggered after executing the units logic. Declaration public ControlOutput OutputFlow { get; } Property Value Type Description ControlOutput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.Helpers.html": {
    "href": "api/Visual_Scripting.Helpers.html",
    "title": "Namespace Visual_Scripting.Helpers | TrainAR Documentation",
    "keywords": "Namespace Visual_Scripting.Helpers Classes ObjectHelper The Object helper provides utility methods to toggle visibility,grabbability, interactability, and combinability of TrainAR objects, to destroy them or to get GameObject references to TrainAR object in the stateflow. Enums ObjectHelper.TrainARHelperChoices"
  },
  "api/Visual_Scripting.Helpers.ObjectHelper.html": {
    "href": "api/Visual_Scripting.Helpers.ObjectHelper.html",
    "title": "Class ObjectHelper | TrainAR Documentation",
    "keywords": "Class ObjectHelper The Object helper provides utility methods to toggle visibility,grabbability, interactability, and combinability of TrainAR objects, to destroy them or to get GameObject references to TrainAR object in the stateflow. Inheritance Object ObjectHelper Namespace : Visual_Scripting.Helpers Assembly : Assembly-CSharp.dll Syntax public class ObjectHelper : Unit Fields | Improve this Doc View Source helperChoice Declaration public ObjectHelper.TrainARHelperChoices helperChoice Field Value Type Description ObjectHelper.TrainARHelperChoices Properties | Improve this Doc View Source CombinabilityToggle Toggle for the combinability that is displayed when this helper is selected. Declaration public ValueInput CombinabilityToggle { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source FuseObjectTwo The second object to fuse together (with the original one. Declaration public ValueInput FuseObjectTwo { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source FusionOffsetPosition The positional offset of the fusion of the objects. Declaration public ValueInput FusionOffsetPosition { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source FusionOffsetRotation The rotational offset of the fusion of the objects. Declaration public ValueInput FusionOffsetRotation { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source GrabbabilityToggle Toggle for the grabbability that is displayed when this helper is selected. Declaration public ValueInput GrabbabilityToggle { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. | Improve this Doc View Source InteractabilityToggle Toggle for the interactability that is displayed when this helper is selected. Declaration public ValueInput InteractabilityToggle { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source InteractableText The interactable text that is displayed on the interaction button. Declaration public ValueInput InteractableText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source Lerpingdistance The lerping distance of the object to the smartphone. Declaration public ValueInput Lerpingdistance { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source ObjectMaterial Texture to replace. Declaration public ValueInput ObjectMaterial { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source ObjectMesh Mesh to replace. Declaration public ValueInput ObjectMesh { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source objectReference The reference to the GameObject in the scene. Declaration public ValueOutput objectReference { get; } Property Value Type Description ValueOutput Set in node in the editor. | Improve this Doc View Source OutputFlow The Output port of the Unit that is tirggered after executing the units logic. Declaration public ControlOutput OutputFlow { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source TrainARObjectName Name of the Object we want to get the reference for. Declaration public ValueInput TrainARObjectName { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source VisibilityToggle Toggle for the visibility that is displayed when this helper is selected. Declaration public ValueInput VisibilityToggle { get; } Property Value Type Description ValueInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.Helpers.ObjectHelper.TrainARHelperChoices.html": {
    "href": "api/Visual_Scripting.Helpers.ObjectHelper.TrainARHelperChoices.html",
    "title": "Enum ObjectHelper.TrainARHelperChoices | TrainAR Documentation",
    "keywords": "Enum ObjectHelper.TrainARHelperChoices Namespace : Visual_Scripting.Helpers Assembly : Assembly-CSharp.dll Syntax public enum TrainARHelperChoices Fields Name Description ChangeInteractionText ChangeLerpingDistance DestroyObject FuseTwoObjects GetObjectReference ReplaceMeshAndTexture ToggleCombinable ToggleGrabbable ToggleInteractable ToggleVisibility"
  },
  "api/Visual_Scripting.html": {
    "href": "api/Visual_Scripting.html",
    "title": "Namespace Visual_Scripting | TrainAR Documentation",
    "keywords": "Namespace Visual_Scripting Classes Action Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine ActionFork Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine ActionMulti Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine ActionUI Implements the \"Interacting\", \"Combining\" and \"Custom\" Action functionality of the TrainAR Framework, therefore it checks if the user triggered the \"Interact\", \"Combine\" Buttons or triggered a CustomAction through scripts and allows to check this against the stored state in the visual script machine Conclusion Triggers the Completion overlay of the scenario and ends the stategraph. Feedback Implements the \"Feedback\" functionality of the TrainAR Framework, therefore it triggers the error overlay modality to show feedback (e.g. for an incorrect important action). Insights Implements the \"Insights\" functionality of the TrainAR Framework, therefore it triggers. the expert input modality to show additional insights Instructions Implements the \"Feedback\" functionality of the TrainAR Framework, therefore it updates. the Top panel. OnboardingSetup Adds the EventHook for the onboarding setup. VisualScriptingEventNames Registering a string name for your custom event to hook it to an event. You can save this class in a separated file and add multiple events to it as public static strings. Enums Action.TrainARActionChoices ActionFork.TrainARActionChoices ActionMulti.TrainARActionChoices ActionUI.TrainARUIActionChoices"
  },
  "api/Visual_Scripting.Insights.html": {
    "href": "api/Visual_Scripting.Insights.html",
    "title": "Class Insights | TrainAR Documentation",
    "keywords": "Class Insights Implements the \"Insights\" functionality of the TrainAR Framework, therefore it triggers. the expert input modality to show additional insights Inheritance Object Insights Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class Insights : Unit Properties | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. | Improve this Doc View Source InsightAudioClip The audioclip to be played with the expert insights. Declaration public ValueInput InsightAudioClip { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source InsightExpertImage The image/symbol to be displayed as the \"expert\" next to the text. Declaration public ValueInput InsightExpertImage { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source InsightText The instruction text that is displayed for the current step. Declaration public ValueInput InsightText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source OutputFlow The Output port of the Unit that is tirggered after executing the units logic. Declaration public ControlOutput OutputFlow { get; } Property Value Type Description ControlOutput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.Instructions.html": {
    "href": "api/Visual_Scripting.Instructions.html",
    "title": "Class Instructions | TrainAR Documentation",
    "keywords": "Class Instructions Implements the \"Feedback\" functionality of the TrainAR Framework, therefore it updates. the Top panel. Inheritance Object Instructions Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class Instructions : Unit Properties | Improve this Doc View Source InputFlow The Input port of the Unit that triggers the internal logic. Declaration public ControlInput InputFlow { get; } Property Value Type Description ControlInput Set in node in the editor. | Improve this Doc View Source instructionText The instruction text that is displayed for the current step. Declaration public ValueInput instructionText { get; } Property Value Type Description ValueInput Set in node in the editor. | Improve this Doc View Source OutputFlow The Output port of the Unit that is tirggered after executing the units logic. Declaration public ControlOutput OutputFlow { get; } Property Value Type Description ControlOutput Set in node in the editor. | Improve this Doc View Source progressPercentage The percentage that is displayed for the current step. Declaration public ValueInput progressPercentage { get; } Property Value Type Description ValueInput Set in node in the editor. Methods | Improve this Doc View Source Definition() Defines the Nodes input, output and value ports. Declaration protected override void Definition()"
  },
  "api/Visual_Scripting.OnboardingSetup.html": {
    "href": "api/Visual_Scripting.OnboardingSetup.html",
    "title": "Class OnboardingSetup | TrainAR Documentation",
    "keywords": "Class OnboardingSetup Adds the EventHook for the onboarding setup. Inheritance Object OnboardingSetup Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public class OnboardingSetup : EventUnit<bool> Properties | Improve this Doc View Source register Declaration protected override bool register { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetHook(GraphReference) Adding an EventHook with the name of the event to the list of visual scripting events. Declaration public override EventHook GetHook(GraphReference reference) Parameters Type Name Description GraphReference reference Returns Type Description EventHook The event for visual scripting."
  },
  "api/Visual_Scripting.VisualScriptingEventNames.html": {
    "href": "api/Visual_Scripting.VisualScriptingEventNames.html",
    "title": "Class VisualScriptingEventNames | TrainAR Documentation",
    "keywords": "Class VisualScriptingEventNames Registering a string name for your custom event to hook it to an event. You can save this class in a separated file and add multiple events to it as public static strings. Inheritance Object VisualScriptingEventNames Namespace : Visual_Scripting Assembly : Assembly-CSharp.dll Syntax public static class VisualScriptingEventNames Fields | Improve this Doc View Source OnboardingAndSetupCompleted Declaration public static string OnboardingAndSetupCompleted Field Value Type Description String"
  },
  "index.html": {
    "href": "index.html",
    "title": "TrainAR | TrainAR Documentation",
    "keywords": "TrainAR TrainAR is a holistic threefold combination of an interaction concept, didactic framework and authoring tool for Augmented Reality (AR) trainings on handheld Android and iOS devices ( Blattgerste et al. 2021 ). It is completely free and offers non-programmers and programmers without AR-specific expertise aiding in the creation of interactive, engaging, procedural Augmented Reality trainings. This repository contains the technical components of the interaction concept and authoring tool of TrainAR in form of a custom Unity 2022 Editor Setup. It can be used with the Unity Windows, macOS (Silicon), macOS (Intel), or Linux Editor and deploy to Android and iOS devices. The authoring tool already offers features like the onboarding animations, tracking solutions, assembly placements, evaluated interaction concepts, layered feedback modalities and training assessments of TrainAR out of the box. This allows authors of trainings to focus on the content of the training instead of technical challenges. Auhtors can simply import 3D models into the tool, convert them to TrainAR objects and reference them in a visual stateflow (that is inspired by work-process-analyses) to create a procedural flow of instructions, user actions and feedback. The idea behind TrainAR is simple: Realistic deployments of head-mounted AR devices still remain a challange today because of high costs, missing relevant training, and novelty of interactions that require indepth onboarding. In contrast, smartphone-based AR would be realistically scalable today, while still retaining many of the learning benefits. At least in theory. While possible, most mobile AR learning applications focus on visualization instead of interactions today, severly limiting their application scope. In line with recent findings that, in terms of training outcome, tangible interactions are not significantly increasing retention or transfer of knowledge compared to purely virtual interaction approaches ( Knierim et al. 2020 ), the idea of TrainAR is a holistic and scalable solution for proceudral task training using Augmented Reality on handheld AR devices. Hereby, the idea is not to replace practical trainings but use TrainAR scenarios for concept understanding in preparation for or retention training after the pracitcal training sessions. In line with Gagne 1984 , it is envisioned as a noval type of multimedia source to train intellectual skills and cogntive strategies but does not train associated motor skills. TrainAR Scenarios Several scenarios were already developed by us, researchers from partner universities, and students using preliminary versions of the TrainAR authoring tool. They span across the context of medical education, nursing education, chemical engineering, science educational, manual assembly, and everyday work tasks. A list of publications for some of the scenarios can be found below. Documentation & Getting started If you want to try out already developed TrainAR trainings, here is a list of available Apps that utilize TrainAR: Training scenario \"Preparation of a tocolytic injection\" in the Heb@AR App [ Youtube , Android & iOS ] Training scenario \"Pelvis Termini\" in the Heb@AR APP [ Android & iOS ] If you want to get started with creating, deploying and playing with your own TrainAR training, check out our Getting Started Guide . You can either use the example scenario that ships with this repository, or create a very simple example scene from the guide in less than half an hour. Beyond the Getting Started Guide, a full documentation is available detailing the available visual scripting nodes , how to create TrainAR objects and how to use nodes to implement action flows . Additionally, a complete documentation of all API references is included. A key idea behind TrainAR is the retention of the full Unity capabilities while offering a higher-level abstraction for non-programmers to get started with AR authoring. Therefore, it can also be utilized without the visual scripting and without the TrainAR authoring overlay, using the standard Unity Editor Overlay and C# programming. This could for example be interesting, if you want to implement non-procedural educational games or you are only interested in the components of the interaction concept and not so much the authoring tool itself. For this, check out the Advanced Options documentation. Contributing to this project TrainAR is envisioned as a participatory project, continously improving and expanding it's quality and scope. Feel free to contribute to its source code, documentation or conceptual/didactic ideas through Issues or Discussions . You are using TrainAR for an Augmented Reality training or learning game? Show us what you created! Publication List TrainAR Framework: Blattgerste, J., Janßen, S., Behrends, J., & Pfeiffer, T. (Forthcoming). TrainAR: An Open Source Visual Scripting-based Authoring Tool for Procedural Mobile Augmented Reality Trainings . Blattgerste, J., Luksch, K., Lewa, C., & Pfeiffer, T. (2021). TrainAR: A Scalable Interaction Concept and Didactic Framework for Procedural Trainings Using Handheld Augmented Reality . Multimodal Technologies and Interaction, 5(7), 30. TrainAR Trainings: Domínguez Alfaro, J. L., Gantois, S., Blattgerste, J., De Croon, R., Verbert, K., Pfeiffer, T., & Van Puyvelde, P. (2022). Mobile Augmented Reality Laboratory for Learning Acid–Base Titration . Journal of Chemical Education, 99(2), 531–537. Blattgerste, J., Luksch, K., Lewa, C., Kunzendorf, M., Bauer, N. H., Bernloehr, A., ... & Pfeiffer, T. (2020). Project Heb@AR: Exploring handheld Augmented Reality training to supplement academic midwifery education . DELFI 2020–Die 18. Fachtagung Bildungstechnologien der Gesellschaft für Informatik eV. Funding The research resulting in the open source TrainAR project was partially supported by the grant 16DHB3021, project \"HebAR - AR-Based-Training-Technology\", by the German Ministry for Education and Research (BMBF) [ 1 ] and partially by the Mixed Reality Lab at University of Applied Sciences Emden/Leer. TrainAR is the abstraction and generalization of interaction concepts, feedback mechanisms, and didactic ideas developed during Project Heb@AR [ 1 , 2 ]. Here, procedural Augmented Reality emergency trainings were explored in the academic midwifery education context. During the development it became clear that those concepts could also be generalized towards other training contexts and thus we share TrainAR here. Acknowledgement TrainAR is freely accessible for commercial and non-commercial use under the MIT license and does not require acknowledgement. If you use TrainAR in the scientific context, please acknowledge it by citing our publications on the interaction concept, didactic considerations and the authoring tool itself: @article{blattgerste2021trainar, title={TrainAR: A Scalable Interaction Concept and Didactic Framework for Procedural Trainings Using Handheld Augmented Reality}, author={Blattgerste, Jonas and Luksch, Kristina and Lewa, Carmen and Pfeiffer, Thies}, journal={Multimodal Technologies and Interaction}, volume={5}, number={7}, pages={30}, year={2021}, publisher={Multidisciplinary Digital Publishing Institute} }"
  },
  "manual/ActionNodes.html": {
    "href": "manual/ActionNodes.html",
    "title": "Action Nodes | TrainAR Documentation",
    "keywords": "Action Nodes TrainAR: Action nodes define which are the correct steps to take for the user in the AR-Training. There are Action Nodes that require an input in the AR-Context, so interactions with the TrainAR Objects, but their are also action nodes which require input of the user on the user interface (UI Action Nodes), which are documented separately here . AR interactions with Action Nodes Interacting with TrainAR Objects is possible in two ways: interacting and combining. The node can be set to the type of interaction via the drop down menu. This node is set to Interaction. If the stateflow is at this node, it waits for actions by the user. If the user triggers an interact with the TrainAR Object specified in Correct object , the stateflow continues according to the Correct -Output of the node. Consequently, if any other action is taken by the user, the stateflow continues according to the Incorrect -Output of the node. For Combinations the node works similarly, though two objects have to be specfied: the grabbed objects, so the one the user is currently holding, and the object the grabbed object is supposed to be combined with. Custom Action With the Action Node set to Custom Action it is also possible to control the stateflow with your own custom actions. In that case, you need to request a state change to the StatemachineConnector with a parameter. This parameter is checked against the parameter defined in the node and then determined as either Correct or Incorrect - the stateflow then resumes accordingly. In this example the correct parameter is defined as \"correctParameter\". The following example describes how to request a state change to the StatemachineConnector: parameterToCheck = \"correctParameter\"; StatemachineConnector.Instance.RequestStateChange(new StateInformation(parameter: parameterToCheck)); parameterToCheck = \"wrongParameter\"; StatemachineConnector.Instance.RequestStateChange(new StateInformation(parameter: parameterToCheck)); The first call to the StatemachineConnector the stateflow continues according to the Correct -output of the node, since parameterToCheck is set to the the correct parameter. The second call to the StatemachineConnector results consequently according to the Incorrect -output of the node. TrainAR: Action (Fork) Sometimes you may run into situations where the training procedure you're creating has multiple correct actions at one point. TrainAR: Action (Fork) let you specify multiple correct actions and the stateflow these action are supposed to result in. The number specified in the Action count field defines the number of TrainAR Objects with whom an action is considered correct. Consequently, if the number is changed, the node adjusts itself, so the specified number of Correct objects and their stateflows may be defined. This of course also works analogous with Combinations . TrainAR Action (Multi) In other cases when creating your training you might run into situations, where multiple actions have to happen, but you don't care about the sequence in which they happen. These cases can be modeled with the TrainAR: Action (Fork) node. The All correct stateflow is triggered once, when all of the defined actions have been performed. If any other actions is registered, the incorrect stateflow is triggered."
  },
  "manual/FeedbackNode.html": {
    "href": "manual/FeedbackNode.html",
    "title": "Feedback Node | TrainAR Documentation",
    "keywords": "Feedback Node This node triggers an UI-Overlay, which covers the whole screen. Therefore it's recommended use is for espeacially important textual feedback. In the node a header text and the feedback text have to be specified."
  },
  "manual/GettingStarted.html": {
    "href": "manual/GettingStarted.html",
    "title": "Getting Started | TrainAR Documentation",
    "keywords": "Getting Started 1. Install Unity Download and install Unity . To use TrainAR you'll need atleast Unity Version 2022.1.0. When installing Unity make sure you check the correct modules, depending on which kind of device you want to create trainings for: For Android choose Android Build Support. Make sure to have also Android SDK & NDK Tools and OpenJDK checked. If you do not already have an IDE installed, we recommend also installing Microsoft Visual Studio Community 2019. For iOS choose iOS Build Support 2. Open TrainAR in Unity Clone the TrainAR Repository to your Computer. Open Unity and add TrainAR as a new Project. Open the TrainAR Project. The Authoring Tool should open. In the scene window you should now see a reference assembly of the current Workspace. This assembly should give you an idea of the size of objects in regards to the real world when viewed in AR mode. 3. Create a TrainAR Object On the left in the Hierarchy tab is a currently empty list of the objects in the scene. On the Bottom Left, in the Project Tab open the Prefabs folder. There is a Prefab named Spoon_Prefab . Click on this Prefab and drag-and-drop it into the Hierarchy Tab. The spoon should appear on the table. To interact with this object You'll need to unpack the prefab and then convert it to a TrainAR Object. You do this by right-clicking on it in the Hierarchy Tab and select Prefab and in the submenu Unpack Completely . Then right-click on it again and select Convert to TrainAR Object . You may then change the name of the object. You can move the newly created TrainAR object around, rotate it or change the size. To do this, you can switch between different tools in the Tools tab in the Scene View. For now make sure the Move tool is selected and move the object in a fitting position on the table. Now add Coffee_Tin_Prefab from the Prefabs folder, unpack it and convert it to an TrainARObject, then position it. Your setup should now look kind of like this: 4. Create a TrainAR Stateflow In the Bottom of the Unity window you should see the window with the Script Graph Tab. Here you can create the flow of your training by creating nodes and connecting them. There already is one node in the Script Graph with the description TrainAR: Onboarding completed and training assembly placed . This is the entry point of your training flow. Right click into the Script Graph Window and select TrainAR from the Node Menu. From there, select TrainAR: Action . The TrainAR Action node should appear in the Stateflow. There are two types of action you can define: Interaction and Combine. For now leave the chosen action to Interaction. In the TrainAR: Action node under the Correct Action textfield type in Spoon . Now connect the two nodes by clicking on the output of the TrainAR: Onboarding completed and training assembly placed node and connecting the line with the input of the TrainAR: Action node. You have now defined that, at this point in the stateflow, the correct next step is to trigger an Interaction on Spoon . Right click again in the Script Graph window to open the node menu and select the TrainAR: Feedback node in the TrainAR nodes folder. This node opens an error overlay. Type a fitting error messages in the textfield and connect the Incorrect output of the TrainAR: Action node with the Input of the TrainAR: Feedback node. You have now defined what happens if an incorrect action is taken at this point in the stateflow. Now define what should happens if the correct action is taken. Create another TrainAR: Feedback node and type in feedback for the correct action taken and connect it to the correct output of the TrainAR: Action node. Now create another TrainAR: Action node and connect it to the TrainAR Feedback for the correct feedback. Select Combination as an Action in the node. Under Correct Grabbed Object type in Spoon and under Correct stationary Object type in Coffee_Tin . Connect the nodes. You have now defined, that at this point in the stateflow, the correct step is to combine the spoon with the coffee tin. Next you'll have to define what happens as a result. Let's make the combine fill up the spoon. To do this add a TrainAR: Object Helper node to the stateflow. In the node, set the dropdown menu to Replace Mesh and type in the Object Name field Spoon . In the Project Tab navigate to the Meshes folder and drag-and-drop the SpoonFilled mesh into the mesh field of the node. Then, drag-and-drop the SpoonFilled material from the Materials folder into the material field. Finally, connect the stateflow. Now add a TrainAR: Action (UI) node. Set the dropdown menu in the node you just created to Questionnaire . A UI action node waits for user input on the UI before it continues in a stateflow. In this example, we'll simply ask the user whether or not he want's to finish the training. Therefore write a fitting Questiontext in the Question field of the node and add some chooseable answers. Don't forget to connect the stateflow of the previous node. Finally, create a TrainAR: Training Conclusion node and connect the node from the previous step with it. Here is the full procedure in one go: 5. Deploy your training to your phone Connect your Phone to your Computer. Make sure you have USB Debugging activated on your phone. Press the play button in the Unity Editor to deploy your training to your device. Your Training should now be deployed to your phone and appear as TrainAR on your device. 6. Test your training Open the now deployed application on your phone. Your phone might ask you if the TrainAR app should be allowed to use your phones camera. Confirm this. A short tutorial that describes the general actions in TrainAR should appear. Navigate through the tutorial. The camera feed of your device should start and you're asked to find a flat surface to scan. Follow these instructions. This should result in the setup you just created being placed. [TBD Image of placed setup] Now you can go through the actions you just as you programmed them into the stateflow."
  },
  "manual/InsightNode.html": {
    "href": "manual/InsightNode.html",
    "title": "Insight Node | TrainAR Documentation",
    "keywords": "Insight Node TrainAR: Insight nodes may be used to show additional insights or hints to the user. Textual insight as well as a soundfile and an image may be specified in this node."
  },
  "manual/InstructionNode.html": {
    "href": "manual/InstructionNode.html",
    "title": "Instruction Node | TrainAR Documentation",
    "keywords": "Instruction Node With the TrainAR: Instruction node you can update the text and the progress percentage in the top panel. Consequently, you can specify the instruction text and the progress percentage in the node."
  },
  "manual/Nodes.html": {
    "href": "manual/Nodes.html",
    "title": "TrainAR Nodes | TrainAR Documentation",
    "keywords": "TrainAR Nodes TrainAR Nodes are used to model the behaviour and procedural flow of the AR Trainings created with TrainAR. TrainAR Nodes define what the next correct next step in your training is but also how your training reacts to correct or incorrect steps taken by the user. Consequently, there are TrainAR Nodes which wait for an Action taken by the user, these are called TrainAR Actions . TrainAR Actions consist of actions taken in the AR-context (so, grabbing, interacting or combining) and UI-actions (i.e a UI element which pops up and asks the user a question). How your training reacts to correct or incorrect steps taken by the user are defined by TrainAR Insight-, Instruction-, Feedback- and Object Helper Nodes . With theese you can define the consequences of the users actions in the AR-context and give feedback for these actions in the form of textual information displayed on the UI."
  },
  "manual/NoVisualScripting.html": {
    "href": "manual/NoVisualScripting.html",
    "title": "Advanced Options | TrainAR Documentation",
    "keywords": "Advanced Options TrainAR is supposed to be used by non programmers. In case you want to be a bit less restricted, here are some ways that might help you. Switching to default Unity Editor You can switch to the regular Unity Editor by navigating to the TrainAR Tab at the top of the screen and clicking on Open Unity Editor . You can switch back to the autoring tool in the same way. Using TrainAR without Visual Scripting It is possible to use TrainAR without the visual scripting. In that case you need to handle requests to the Statemachine yourself. To disable visual scripting you need to comment a specific piece of code in the StatemachineConnector in the function RequestStateChange() . Look for this part: acceptedStateChange = stateInformation.interactionType switch { InteractionType.Grab => true, //For grabbing this is always true, selection, deselection and release are not calling this InteractionType.Combine => stateChangeTrigger.Invoke(stateInformation), InteractionType.Interact => stateChangeTrigger.Invoke(stateInformation), InteractionType.Custom => stateChangeTrigger.Invoke(stateInformation), _ => acceptedStateChange }; And and comment it like this: /* acceptedStateChange = stateInformation.interactionType switch { InteractionType.Grab => true, //For grabbing this is always true, selection, deselection and release are not calling this InteractionType.Combine => stateChangeTrigger.Invoke(stateInformation), InteractionType.Interact => stateChangeTrigger.Invoke(stateInformation), InteractionType.Custom => stateChangeTrigger.Invoke(stateInformation), _ => acceptedStateChange }; */ If you choose to do this, you also have to handle the outputs manually. In this case you also have to handle outputs manually. This is possible by just manually calling the methods UpdateTopPanel() , ShowErrorOverlay() , ShowExpertInsights() , and ShowCompletionOverlay() in the StatemachineConnector to trigger the corresponding funtions of the TrainAR framework."
  },
  "manual/ObjectHelperNode.html": {
    "href": "manual/ObjectHelperNode.html",
    "title": "Object Helper Node | TrainAR Documentation",
    "keywords": "Object Helper Node TrainAR: Object Helper node give you various options to configure specific TrainAR Objects. In the Helper dropwodn menu you can view the different configuration options. To specifiy which TrainAR Object in the scene you want to configure, specify the Object name in the node. Toggle Visibility Check or unech the Visible field to make the specified TrainAR Object invisible or visible. Toggle Grabbable Check or uncheck the Grabbable field to make the specified TrainAR Object grabbable or ungrabbable. Toggle Interactable Check or uncheck the Interactable field to make the specified TrainAR Object interactable or not interactable. Toggle Combinable Check or uncheck the Combinable field to make the specified TrainAR Object combinable or not combinable. Change Interaction text Changes the labeling of the interaction button when selecting an TrainAR Object. A TrainAR Object is selected when you aim at a TrainAR Object and move close to it. By default the labeling is simply Interact . Change Lerping distance This changes the distance with which an grabbed TrainAR Object floats away from the screen. Generally, you probably want to have bigger TrainAR Objects float at a larger distance than smaller ones. That way they don't cover the whole screen while grabbing them. Change Mesh and Texture With this node you can change what a TrainAR Object looks like by changing it's mesh and material. This is for example useful if as a result of a combination or interaction an object is supposed to be altered. Get Object Reference This node returns the Unity GameObject Reference of the specified TrainAR Object . For more information about Unity GameObjects refer to the Unity Documentation . Fuse Two Objects This attaches one TrainAR Object to another, making them one. The Object name field specifies the object that is fused unto another object, which is specified in the Fuse to Object field. In the Offset Position and Rotation field the position and rotation relative to the fused to TrainAR Object is specified. Destroy Object Destroys and removes the specified TrainAR Object from the scene."
  },
  "manual/StartTrainingNode.html": {
    "href": "manual/StartTrainingNode.html",
    "title": "Start Training Node | TrainAR Documentation",
    "keywords": "Start Training Node This node acts as a starting point for a TrainAR training. The stateflow initiates from this point, as soon as the training assembly has been placed."
  },
  "manual/TrainARBasics.html": {
    "href": "manual/TrainARBasics.html",
    "title": "| TrainAR Documentation",
    "keywords": "hi!"
  },
  "manual/TrainARNodes.html": {
    "href": "manual/TrainARNodes.html",
    "title": "TrainAR Nodes | TrainAR Documentation",
    "keywords": "TrainAR Nodes TrainAR Nodes are used to model the behaviour and procedural flow of the AR Trainings created with TrainAR. TrainAR Nodes define what the next correct next step in your training is but also how your training reacts to correct or incorrect steps taken by the user. Consequently, there are TrainAR Nodes which wait for an Action taken by the user, these are called TrainAR Actions . TrainAR Actions consist of actions taken in the AR-context (so, grabbing, interacting or combining) and UI-actions (i.e a UI element which pops up and asks the user a question). How your training reacts to correct or incorrect steps taken by the user are defined by TrainAR Insight-, Instruction-, Feedback- and Object Helper Nodes . With theese you can define the consequences of the users actions in the AR-context and give feedback for these actions in the form of textual information displayed on the UI."
  },
  "manual/TrainArObjects.html": {
    "href": "manual/TrainArObjects.html",
    "title": "Create and Configure TrainAR Objects | TrainAR Documentation",
    "keywords": "Create and Configure TrainAR Objects To be able to use your assets for interactions in TrainAR, you need to convert them to TrainAR Objects first. To convert an object into an TrainAR Object simply drag-and-drop it from the project tab into the hierarchy tab. Then right click on it in the hierarchy tab and select Convert to TrainAR Object . If the asset you're trying to convert is packed as a prefab, you'll also have to unpack it. Note: An object may only be converted to a TrainAR Object, if it has a transform, MeshFilter and a MeshRenderer applied to it. TrainAR Object States A TrainAR Object has certain state attribute with which you can control in which kinds of ways the object can be interacted with. These states are: Visible: Whether or not this TrainAR Object is visible. Grabbable: If this is enabled, objects may be grabbed and moved around. Therefore this should be disabled, in case of stationary objects. Interactable: Whether or not it is possible to trigger interactions on this object. Combineable: Whether or not it is possible to trigger combines on this object. If you have selected an TrainAR Object in the Authoring Tool, you can toggle these states by clicking on them in the Object State Toolbar . Tool bar With the Tools bar you can configure your TrainAR Objects further. For example, you can move, rotate and scale objects. The Transform tool is a combination of the previous tools. With the Bounding Box Tool you can configure the bounding box of the object, which among other things, defines at what point TrainAR Objects are overlapping, so they can be combined with each other. Holding alt and clicking pins the center in place and clicking shift makes it possible to scale the bounding box uniformly."
  },
  "manual/TrainingConclusionNode.html": {
    "href": "manual/TrainingConclusionNode.html",
    "title": "Training Conclusion Node | TrainAR Documentation",
    "keywords": "Training Conclusion Node The TrainAR: Training Conclusion node opens a overview with various performance metrics accumulated over the training. This consists of a graph displaying the amount of errors made during the training"
  },
  "manual/UIActionNodes.html": {
    "href": "manual/UIActionNodes.html",
    "title": "TrainAR UI Action | TrainAR Documentation",
    "keywords": "TrainAR UI Action TrainAR: Action nodes (UI) define which are the correct steps to take for the user in the AR-Training. UI Action notes require input of the user on the user interface. UI Action nodes include action nodes in the form of various Questionnaire-type UI-Elements. In the node, you may change via the dropdown menu UI-Task: between Questionnaire, Input Field or list selection actions. UI Task: Questionnaire If the UI Task is set to Questionnaire, the user will be shown a question and a set of predetermined answers. When the user chooses one of these answers, the user is also shown feedback. The question itself as well as the number of corresponding correct and wrong answers and their feedback have to be specified in the node. If the user inputs an answer, the stateflow resumes according to the Correct or Incorrect outputs of the node. UI Task: Input Field With the UI Task set to Input Field, the user has to type in his answer to a question via an on-screen keyboard. The questions as well as the correct answers have to be specified in the node. If the user inputs an answer, the stateflow resumes according to the Correct or Incorrect outputs of the node. UI Task: List Selection With the UI Task set to List Selection the user is presented with a list of possible anwers on UI buttons, which can be defined, as well as their respective feedback, in the node. If the user chooses an answer the stateflow proceeds according to the Correct or Incorrect output of the node."
  },
  "manual/VisualScripting.html": {
    "href": "manual/VisualScripting.html",
    "title": "Using Visual Scripting to create trainings | TrainAR Documentation",
    "keywords": "Using Visual Scripting to create trainings By creating stateflows you describe the procedural sequences of the trainings you can create with TrainAR. In essence, this stateflow describes at which points, which actions are expected of the user and how the training reacts to those actions. Starting node The TrainAR: Onboarding completed and training assembly placed node acts as a starting point for the stateflow. The stateflow continues from this point, as soon as the training setup is placed. Connecting nodes TrainAR nodes have various inputs and outputs. By connecting the nodes with eachother you control the procedural flow of your training. Connecting nodes is done by connecting an output of one node with the input of another. Referencing TrainAR Objects in TrainAR nodes With some nodes in TrainAR you want to reference specific TrainAR Objects , most notably, TrainAR: Action and TrainAR: Object Helper nodes . Referencing objects in nodes is done by using the name of the TrainAR Object . Let's look at an example. In this setup there is a cup as TrainAR Object in the Hierarchy of the scene. If you want to reference this cup in a node you simply have to use the name of the object as it is in the hierarchy as a reference. This is done in the TrainAR: Action node in the Correct object field. Conditional Outputs Some nodes have multiple outputs, which get triggered depending on what happened in your training. For example you probably want to react differently to a correct input of a user than to an incorrect input. Consequently, these nodes have multiple outputs. Consider this example: The correct user action at this state is an interact on the Cup TrainAR Object. If this occures, the stateflow continues according to the correct path, otherwise according to the Incorrect path, which in this case displays a error feedback on the UI. Since the Incorrect path ends after the feedback node, the stateflow returns to the previous TrainAR Action node and waits for the next input of the user."
  }
}